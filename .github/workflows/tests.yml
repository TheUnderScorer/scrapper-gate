name: Tests
on:
  pull_request:
    branches:
      - '*'

jobs:
  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Typecheck
        run: npm run typecheck

  build-base-image:
    name: Build base image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: "setup buildx"
        uses: docker/setup-buildx-action@v1

      - name: "cache docker layers"
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: "docker meta"
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: scrapper-gate-base
          tags: latest

      - name: "docker build"
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/docker.tar
          push: false
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}
          file: docker/base/Dockerfile

      - name: "docker artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: docker
          path: /tmp/docker.tar

  build:
    needs:
      - typecheck
      - build-base-image
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps && npm run build:tools

      - name: Build
        run: npx nx build browser-extension --prod && npx nx build api

  lint:
    needs:
      - typecheck
      - build-base-image
    name: Run linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Configure CI Git User
        run: |
          git config --global user.name 'TheUnderScorer'
          git config --global user.email 'przemyslawzydek@gmail.com'
          git remote set-url origin https://TheUnderScorer:$GITHUB_TOKEN@github.com/TheUnderScorer/scrapper-gate
          git fetch --no-tags --prune origin master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Lint
        run: npm run lint

  test-shared:
    needs:
      - typecheck
      - build-base-image
    name: Run shared tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Start docker
        run: docker compose up -d

      - name: Setup env
        run: cp .local.env.dist .local.env

      - name: Install dependencies
        run: npm ci --legacy-peer-deps && npm i ts-node -g

      - name: Test
        run: |
          PROJECTS=$(TS_NODE_PROJECT=tsconfig.node.json ts-node tools/scripts/gatherProjects.ts --filter="shared-*")
          echo "$PROJECTS"
          npx nx run-many --target=test --projects=$PROJECTS --parallel --maxParallel=2

  test-backend:
    needs:
      - typecheck
      - build-base-image
    name: Run backend tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'

      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Remove broken apt repos [Ubuntu]
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done

      - uses: leonardodino/setup-playwright@main

      - name: Start docker
        run: sudo docker compose up -d

      - name: Install dependencies
        run: npm ci --legacy-peer-deps && npm i ts-node -g && npm ci --prefix deploy

      - name: Wait for localstack
        run: sudo AWS_S3_ENDPOINT=http://localhost:4566 node docker/localstack/waitForLocalStack.mjs

      - uses: pulumi/actions@v3
        name: Start pulumi
        with:
          command: up
          stack-name: development
          work-dir: deploy
          cloud-url: local
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: test

      - name: Setup env
        run: cp .local.env.dist .local.env

      - name: Test
        run: |
          PROJECTS=$(TS_NODE_PROJECT=tsconfig.node.json ts-node tools/scripts/gatherProjects.ts --filter="backend-*")
          echo "$PROJECTS"
          npx nx run-many --target=test --projects=$PROJECTS --parallel --maxParallel=2

      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: test-artifact
          path: artifacts

      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: test-artifact
          path: libs/backend/domain/scrapper/playwright-runner/src/__image_snapshots__/__diff_output__

  test-frontend:
    needs:
      - typecheck
      - build-base-image
    name: Run frontend tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Start docker
        run: docker compose up -d

      - name: Setup env
        run: cp .local.env.dist .local.env

      - name: Install dependencies
        run: npm ci --legacy-peer-deps && npm i ts-node -g

      - name: Test
        run: |
          PROJECTS=$(TS_NODE_PROJECT=tsconfig.node.json ts-node tools/scripts/gatherProjects.ts --filter="frontend-*")
          echo "$PROJECTS"
          npx nx run-many --target=test --projects=$PROJECTS --parallel --maxParallel=2

  test-apps:
    needs:
      - typecheck
      - build-base-image
    name: Run apps tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Start docker
        run: sudo docker compose up -d

      - name: Install dependencies
        run: npm ci --legacy-peer-deps && npm i ts-node -g && npm ci --prefix deploy

      - name: Wait for localstack
        run: sudo AWS_S3_ENDPOINT=http://localhost:4566 node docker/localstack/waitForLocalStack.mjs

      - uses: pulumi/actions@v3
        name: Start pulumi
        with:
          command: up
          stack-name: development
          work-dir: deploy
          cloud-url: local
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: test

      - name: Setup env
        run: cp .local.env.dist .local.env

      - name: Test
        run: npx nx run-many --target=test --projects=api,browser-extension --parallel --maxParallel=2

  test-e2e:
    needs:
      - typecheck
      - build-base-image
    name: Run e2e tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v2

      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Start docker
        run: sudo docker compose up -d

      - name: Install dependencies
        run: npm ci --legacy-peer-deps && npm i ts-node -g && npm run build:tools && npm ci --prefix deploy

      - name: Wait for localstack
        run: sudo AWS_S3_ENDPOINT=http://localhost:4566 node docker/localstack/waitForLocalStack.mjs

      - uses: pulumi/actions@v3
        name: Start pulumi
        with:
          command: up
          stack-name: development
          work-dir: deploy
          cloud-url: local
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: test

      - name: "setup buildx"
        uses: docker/setup-buildx-action@v1

      - name: "cache docker layers"
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: "download docker artifacts"
        uses: actions/download-artifact@v2
        with:
          name: docker
          path: /tmp

      - name: "load base image"
        run: |
          docker load --input /tmp/docker.tar
          docker image ls -a

      - name: Setup env
        run: cp .local.env.dist .local.env

      - name: Setup extension
        run: cp apps/browser-extension/.local.env.dist apps/browser-extension/.env

      - name: Test
        run: npx nx run browser-extension-e2e:e2e-docker

      - name: Write API logs
        run: docker compose -f docker compose.prod.yml logs api > api-logs.log
        if: ${{ failure() }}

      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: api-logs
          path: api-logs.log

      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: test-artifact
          path: artifacts
